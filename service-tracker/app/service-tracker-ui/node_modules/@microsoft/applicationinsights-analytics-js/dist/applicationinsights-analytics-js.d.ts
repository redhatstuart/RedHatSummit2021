/*
 * Microsoft Application Insights JavaScript SDK - Web Analytics, 2.6.2
 * Copyright (c) Microsoft and contributors. All rights reserved.
 *
 * Microsoft Application Insights Team
 * https://github.com/microsoft/ApplicationInsights-JS#readme
 */

declare namespace ApplicationInsights {
    import { BaseTelemetryPlugin } from '@microsoft/applicationinsights-core-js';
    import { IAppInsights } from '@microsoft/applicationinsights-common';
    import { IAppInsightsCore } from '@microsoft/applicationinsights-core-js';
    import { IAutoExceptionTelemetry } from '@microsoft/applicationinsights-common';
    import { IConfig } from '@microsoft/applicationinsights-common';
    import { IConfiguration } from '@microsoft/applicationinsights-core-js';
    import { ICookieMgr } from '@microsoft/applicationinsights-core-js';
    import { ICustomProperties } from '@microsoft/applicationinsights-core-js';
    import { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';
    import { IEventTelemetry } from '@microsoft/applicationinsights-common';
    import { IExceptionTelemetry } from '@microsoft/applicationinsights-common';
    import { IMetricTelemetry } from '@microsoft/applicationinsights-common';
    import { IPageViewPerformanceTelemetry } from '@microsoft/applicationinsights-common';
    import { IPageViewPerformanceTelemetryInternal } from '@microsoft/applicationinsights-common';
    import { IPageViewTelemetry } from '@microsoft/applicationinsights-common';
    import { IPageViewTelemetryInternal } from '@microsoft/applicationinsights-common';
    import { IPlugin } from '@microsoft/applicationinsights-core-js';
    import { IProcessTelemetryContext } from '@microsoft/applicationinsights-core-js';
    import { ITelemetryItem } from '@microsoft/applicationinsights-core-js';
    import { ITelemetryPluginChain } from '@microsoft/applicationinsights-core-js';
    import { ITraceTelemetry } from '@microsoft/applicationinsights-common';

    class ApplicationInsights extends BaseTelemetryPlugin implements IAppInsights, IAppInsightsInternal {
        static Version: string;
        static getDefaultConfig(config?: IConfig): IConfig;
        identifier: string;
        priority: number;
        config: IConfig;
        queue: Array<() => void>;
        autoRoutePVDelay: number;
        protected _telemetryInitializers: Array<(envelope: ITelemetryItem) => boolean | void>;
        protected _pageViewManager: PageViewManager;
        protected _pageViewPerformanceManager: PageViewPerformanceManager;
        protected _pageVisitTimeManager: PageVisitTimeManager;
        constructor();
        /**
         * Get the current cookie manager for this instance
         */
        getCookieMgr(): ICookieMgr;
        processTelemetry(env: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
        trackEvent(event: IEventTelemetry, customProperties?: ICustomProperties): void;
        /**
         * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.
         * @param   name    A string that identifies this event uniquely within the document.
         */
        startTrackEvent(name: string): void;
        /**
         * Log an extended event that you started timing with `startTrackEvent`.
         * @param   name    The string you used to identify this event in `startTrackEvent`.
         * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
         * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.
         */
        stopTrackEvent(name: string, properties?: {
            [key: string]: string;
        }, measurements?: {
            [key: string]: number;
        }): void;
        /**
         * @description Log a diagnostic message
         * @param {ITraceTelemetry} trace
         * @param ICustomProperties.
         * @memberof ApplicationInsights
         */
        trackTrace(trace: ITraceTelemetry, customProperties?: ICustomProperties): void;
        /**
         * @description Log a numeric value that is not associated with a specific event. Typically
         * used to send regular reports of performance indicators. To send single measurement, just
         * use the name and average fields of {@link IMetricTelemetry}. If you take measurements
         * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements
         * and sending the resulting average at intervals
         * @param {IMetricTelemetry} metric input object argument. Only name and average are mandatory.
         * @param {{[key: string]: any}} customProperties additional data used to filter metrics in the
         * portal. Defaults to empty.
         * @memberof ApplicationInsights
         */
        trackMetric(metric: IMetricTelemetry, customProperties?: ICustomProperties): void;
        /**
         * Logs that a page or other item was viewed.
         * @param IPageViewTelemetry The string you used as the name in startTrackPage. Defaults to the document title.
         * @param customProperties Additional data used to filter events and metrics. Defaults to empty.
         * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration
         */
        trackPageView(pageView?: IPageViewTelemetry, customProperties?: ICustomProperties): void;
        /**
         * Create a page view telemetry item and send it to the SDK pipeline through the core.track API
         * @param pageView Page view item to be sent
         * @param properties Custom properties (Part C) that a user can add to the telemetry item
         * @param systemProperties System level properties (Part A) that a user can add to the telemetry item
         */
        sendPageViewInternal(pageView: IPageViewTelemetryInternal, properties?: {
            [key: string]: any;
        }, systemProperties?: {
            [key: string]: any;
        }): void;
        /**
         * @ignore INTERNAL ONLY
         * @param pageViewPerformance
         * @param properties
         */
        sendPageViewPerformanceInternal(pageViewPerformance: IPageViewPerformanceTelemetryInternal, properties?: {
            [key: string]: any;
        }, systemProperties?: {
            [key: string]: any;
        }): void;
        /**
         * Send browser performance metrics.
         * @param pageViewPerformance
         * @param customProperties
         */
        trackPageViewPerformance(pageViewPerformance: IPageViewPerformanceTelemetry, customProperties?: ICustomProperties): void;
        /**
         * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,
         * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view
         * and send the event.
         * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.
         */
        startTrackPage(name?: string): void;
        /**
         * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.
         * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.
         * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.
         * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.
         * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.
         * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.
         */
        stopTrackPage(name?: string, url?: string, properties?: {
            [key: string]: string;
        }, measurement?: {
            [key: string]: number;
        }): void;
        /**
         * @ignore INTERNAL ONLY
         * @param exception
         * @param properties
         * @param systemProperties
         */
        sendExceptionInternal(exception: IExceptionTelemetry, customProperties?: {
            [key: string]: any;
        }, systemProperties?: {
            [key: string]: any;
        }): void;
        /**
         * Log an exception you have caught.
         *
         * @param {IExceptionTelemetry} exception   Object which contains exception to be sent
         * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.
         *
         * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.
         * @memberof ApplicationInsights
         */
        trackException(exception: IExceptionTelemetry, customProperties?: ICustomProperties): void;
        /**
         * @description Custom error handler for Application Insights Analytics
         * @param {IAutoExceptionTelemetry} exception
         * @memberof ApplicationInsights
         */
        _onerror(exception: IAutoExceptionTelemetry): void;
        addTelemetryInitializer(telemetryInitializer: (item: ITelemetryItem) => boolean | void): void;
        initialize(config: IConfiguration & IConfig, core: IAppInsightsCore, extensions: IPlugin[], pluginChain?: ITelemetryPluginChain): void;
    }

    /**
     * Internal interface to pass appInsights object to subcomponents without coupling
     */
    interface IAppInsightsInternal {
        sendPageViewInternal(pageViewItem: IPageViewTelemetryInternal, properties?: Object, systemProperties?: Object): void;
        sendPageViewPerformanceInternal(pageViewPerformance: IPageViewPerformanceTelemetryInternal, properties?: Object, systemProperties?: Object): void;
    }

    /**
     * Class encapsulates sending page views and page view performance telemetry.
     */
    class PageViewManager {
        constructor(appInsights: IAppInsightsInternal, overridePageViewDuration: boolean, core: IAppInsightsCore, pageViewPerformanceManager: PageViewPerformanceManager);
        /**
         * Currently supported cases:
         * 1) (default case) track page view called with default parameters, overridePageViewDuration = false. Page view is sent with page view performance when navigation timing data is available.
         *    a. If navigation timing is not supported then page view is sent right away with undefined duration. Page view performance is not sent.
         * 2) overridePageViewDuration = true, custom duration provided. Custom duration is used, page view sends right away.
         * 3) overridePageViewDuration = true, custom duration NOT provided. Page view is sent right away, duration is time spent from page load till now (or undefined if navigation timing is not supported).
         * 4) overridePageViewDuration = false, custom duration is provided. Page view is sent right away with custom duration.
         *
         * In all cases page view performance is sent once (only for the 1st call of trackPageView), or not sent if navigation timing is not supported.
         */
        trackPageView(pageView: IPageViewTelemetry, customProperties?: {
            [key: string]: any;
        }): void;
    }

    /**
     * Class encapsulates sending page view performance telemetry.
     */
    class PageViewPerformanceManager {
        private _logger;
        private MAX_DURATION_ALLOWED;
        constructor(core: IAppInsightsCore);
        populatePageViewPerformanceEvent(pageViewPerformance: IPageViewPerformanceTelemetryInternal): void;
        getPerformanceTiming(): PerformanceTiming | null;
        getPerformanceNavigationTiming(): PerformanceNavigationTiming | null;
        /**
         * Returns true is window PerformanceNavigationTiming API is supported, false otherwise.
         */
        isPerformanceNavigationTimingSupported(): boolean;
        /**
         * Returns true is window performance timing API is supported, false otherwise.
         */
        isPerformanceTimingSupported(): PerformanceTiming;
        /**
         * As page loads different parts of performance timing numbers get set. When all of them are set we can report it.
         * Returns true if ready, false otherwise.
         */
        isPerformanceTimingDataReady(): boolean;
        /**
         * This method tells if given durations should be excluded from collection.
         */
        shouldCollectDuration(...durations: number[]): boolean;
    }

    class PageVisitData {
        pageName: string;
        pageUrl: string;
        pageVisitStartTime: number;
        pageVisitTime: number;
        constructor(pageName: string, pageUrl: string);
    }

    /**
     * Used to track page visit durations
     */
    class PageVisitTimeManager {
        private prevPageVisitDataKeyName;
        private pageVisitTimeTrackingHandler;
        private _logger;
        /**
         * Creates a new instance of PageVisitTimeManager
         * @param pageVisitTimeTrackingHandler Delegate that will be called to send telemetry data to AI (when trackPreviousPageVisit is called)
         * @returns {}
         */
        constructor(logger: IDiagnosticLogger, pageVisitTimeTrackingHandler: (pageName: string, pageUrl: string, pageVisitTime: number) => void);
        /**
         * Tracks the previous page visit time telemetry (if exists) and starts timing of new page visit time
         * @param currentPageName Name of page to begin timing for visit duration
         * @param currentPageUrl Url of page to begin timing for visit duration
         */
        trackPreviousPageVisit(currentPageName: string, currentPageUrl: string): void;
        /**
         * Stops timing of current page (if exists) and starts timing for duration of visit to pageName
         * @param pageName Name of page to begin timing visit duration
         * @returns {PageVisitData} Page visit data (including duration) of pageName from last call to start or restart, if exists. Null if not.
         */
        restartPageVisitTimer(pageName: string, pageUrl: string): PageVisitData;
        /**
         * Starts timing visit duration of pageName
         * @param pageName
         * @returns {}
         */
        startPageVisitTimer(pageName: string, pageUrl: string): void;
        /**
         * Stops timing of current page, if exists.
         * @returns {PageVisitData} Page visit data (including duration) of pageName from call to start, if exists. Null if not.
         */
        stopPageVisitTimer(): PageVisitData;
    }

    
}