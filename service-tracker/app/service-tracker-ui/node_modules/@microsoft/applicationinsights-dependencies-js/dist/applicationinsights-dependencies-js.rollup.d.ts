/*
 * Microsoft Application Insights XHR dependencies plugin, 2.6.2
 * Copyright (c) Microsoft and contributors. All rights reserved.
 *
 * Microsoft Application Insights Team
 * https://github.com/microsoft/ApplicationInsights-JS#readme
 *
 * ---------------------------------------------------------------------------
 * This is a single combined (rollup) declaration file for the package,
 * use this version if your build environment doesn't support the using the
 * individual *.d.ts files or default namespace wrapped version.
 * - Namespaced version: applicationinsights-dependencies-js.d.ts
 * ---------------------------------------------------------------------------
 */

import { BaseTelemetryPlugin } from '@microsoft/applicationinsights-core-js';
import { IAppInsightsCore } from '@microsoft/applicationinsights-core-js';
import { IConfig } from '@microsoft/applicationinsights-common';
import { IConfiguration } from '@microsoft/applicationinsights-core-js';
import { ICorrelationConfig } from '@microsoft/applicationinsights-common';
import { IDependencyTelemetry } from '@microsoft/applicationinsights-common';
import { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';
import { IPlugin } from '@microsoft/applicationinsights-core-js';
import { IProcessTelemetryContext } from '@microsoft/applicationinsights-core-js';
import { ITelemetryItem } from '@microsoft/applicationinsights-core-js';
import { ITelemetryPluginChain } from '@microsoft/applicationinsights-core-js';

export declare class AjaxPlugin extends BaseTelemetryPlugin implements IDependenciesPlugin, IInstrumentationRequirements {
    static identifier: string;
    static getDefaultConfig(): ICorrelationConfig;
    static getEmptyConfig(): ICorrelationConfig;
    identifier: string;
    priority: number;
    constructor();
    initialize(config: IConfiguration & IConfig, core: IAppInsightsCore, extensions: IPlugin[], pluginChain?: ITelemetryPluginChain): void;
    teardown(): void;
    processTelemetry(item: ITelemetryItem, itemCtx?: IProcessTelemetryContext): void;
    /**
     * Logs dependency call
     * @param dependencyData dependency data object
     */
    trackDependencyData(dependency: IDependencyTelemetry, properties?: {
        [key: string]: any;
    }): void;
    includeCorrelationHeaders(ajaxData: ajaxRecord, input?: Request | string, init?: RequestInit, xhr?: XMLHttpRequestInstrumented): any;
    /**
     * Protected function to allow sub classes the chance to add additional properties to the delendency event
     * before it's sent. This function calls track, so sub-classes must call this function after they have
     * populated their properties.
     * @param dependencyData dependency data object
     */
    protected trackDependencyDataInternal(dependency: IDependencyTelemetry, properties?: {
        [key: string]: any;
    }, systemProperties?: {
        [key: string]: any;
    }): void;
}

export declare class ajaxRecord {
    completed: boolean;
    requestHeadersSize: number;
    requestHeaders: any;
    responseReceivingDuration: number;
    callbackDuration: number;
    ajaxTotalDuration: number;
    aborted: number;
    pageUrl: string;
    requestUrl: string;
    requestSize: number;
    method: string;
    perfMark: PerformanceMark;
    perfTiming: PerformanceResourceTiming;
    perfAttempts?: number;
    async?: boolean;
    status: string | number;
    requestSentTime: number;
    responseStartedTime: number;
    responseFinishedTime: number;
    callbackFinishedTime: number;
    endTime: number;
    xhrMonitoringState: XHRMonitoringState;
    clientFailure: number;
    traceID: string;
    spanID: string;
    constructor(traceID: string, spanID: string, logger: IDiagnosticLogger);
    getAbsoluteUrl(): string;
    getPathName(): string;
    CreateTrackItem(ajaxType: string, enableRequestHeaderTracking: boolean, getResponse: () => IAjaxRecordResponse): IDependencyTelemetry;
}

declare interface IAjaxRecordResponse {
    statusText: string;
    headerMap: Object;
    correlationContext: string;
    type?: string;
    responseText?: string;
    response?: Object;
}

export declare interface IDependenciesPlugin {
    /**
     * Logs dependency call
     * @param dependencyData dependency data object
     */
    trackDependencyData(dependency: IDependencyTelemetry): void;
}

export declare interface IInstrumentationRequirements extends IDependenciesPlugin {
    includeCorrelationHeaders: (ajaxData: ajaxRecord, input?: Request | string, init?: RequestInit, xhr?: XMLHttpRequestInstrumented) => any;
}

declare class XHRMonitoringState {
    openDone: boolean;
    setRequestHeaderDone: boolean;
    sendDone: boolean;
    abortDone: boolean;
    stateChangeAttached: boolean;
    constructor();
}

export declare interface XMLHttpRequestInstrumented extends XMLHttpRequest {
    ajaxData: ajaxRecord;
}

export { }