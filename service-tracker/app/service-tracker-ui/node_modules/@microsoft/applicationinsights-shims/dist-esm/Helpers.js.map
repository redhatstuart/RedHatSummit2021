{"version":3,"file":"Helpers.js","sourceRoot":"","sources":["../src/Helpers.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAG,SAAS,EAAE,eAAe,EAAE,aAAa,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAK7G;;;;;;;;;;;GAWG;AACF,MAAM;IACH,EAAE,CAAC,CAAC,OAAO,UAAU,KAAK,gBAAgB,IAAI,UAAU,CAAC,CAAC,CAAC;QACvD,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAED,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,gBAAgB,IAAI,MAAM,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,gBAAgB,IAAI,MAAM,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,IAAI,CAAC;AAChB,CAAC;AAED,MAAM,yBAAyB,OAAe;IAC1C,MAAM,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;AACjC,CAAC;AAED;;;;;GAKG;AACH,MAAM,sBAAsB,GAAQ;IAChC,IAAI,IAAI,GAAG,SAAS,CAAC;IACrB,6BAA6B;IAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACP,wCAAwC;QACxC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;IACD,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;QACd,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IACD,IAAI,IAAI,GAAG,OAAO,GAAG,CAAC;IACtB,EAAE,CAAC,CAAC,IAAI,KAAK,aAAa,IAAI,IAAI,KAAK,eAAe,CAAC,CAAC,CAAC;QACrD,cAAc,CAAC,yCAAyC,GAAG,GAAG,CAAC,CAAC;IACpE,CAAC;IAED,qBAAoB,CAAC;IACrB,OAAO,CAAC,gBAAgB,CAAC,GAAG,GAAG,CAAC;IAEhC,MAAM,CAAC,IAAK,OAAe,EAAE,CAAC;AAClC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {  ObjCreate, strShimFunction, strShimObject, strShimPrototype, strShimUndefined } from \"./Constants\";\r\n\r\ndeclare var globalThis: Window;\r\ndeclare var global: Window;\r\n\r\n/**\r\n * Returns the current global scope object, for a normal web page this will be the current\r\n * window, for a Web Worker this will be current worker global scope via \"self\". The internal \r\n * implementation returns the first available instance object in the following order\r\n * - globalThis (New standard)\r\n * - self (Will return the current window instance for supported browsers)\r\n * - window (fallback for older browser implementations)\r\n * - global (NodeJS standard)\r\n * - <null> (When all else fails)\r\n * While the return type is a Window for the normal case, not all environments will support all\r\n * of the properties or functions.\r\n */\r\n export function getGlobal(): Window {\r\n    if (typeof globalThis !== strShimUndefined && globalThis) {\r\n        return globalThis;\r\n    }\r\n\r\n    if (typeof self !== strShimUndefined && self) {\r\n        return self;\r\n    }\r\n\r\n    if (typeof window !== strShimUndefined && window) {\r\n        return window;\r\n    }\r\n\r\n    if (typeof global !== strShimUndefined && global) {\r\n        return global;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function throwTypeError(message: string): never {\r\n    throw new TypeError(message); \r\n}\r\n\r\n/**\r\n * Creates an object that has the specified prototype, and that optionally contains specified properties. This helper exists to avoid adding a polyfil\r\n * for older browsers that do not define Object.create eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.create implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @param obj Object to use as a prototype. May be null\r\n */\r\nexport function objCreateFn(obj: any): any {\r\n    var func = ObjCreate;\r\n    // Use build in Object.create\r\n    if (func) {\r\n        // Use Object create method if it exists\r\n        return func(obj); \r\n    }\r\n    if (obj == null) { \r\n        return {}; \r\n    }\r\n    var type = typeof obj;\r\n    if (type !== strShimObject && type !== strShimFunction) { \r\n        throwTypeError('Object prototype may only be an Object:' + obj); \r\n    }\r\n\r\n    function tmpFunc() {}\r\n    tmpFunc[strShimPrototype] = obj;\r\n\r\n    return new (tmpFunc as any)();    \r\n}\r\n\r\n"]}