{"version":3,"file":"TsLibGlobals.js","sourceRoot":"","sources":["../src/TsLibGlobals.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAE,SAAS,EAAoB,MAAM,aAAa,CAAC;AAC1D,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AACtC,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAO1E,MAAM;IACF,IAAI,SAAS,GAAO,SAAS,EAAE,IAAI,EAAE,CAAC;IAEtC,uCAAuC;IACvC,CAAC,UAAU,IAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,eAAe;QACtD,kGAAkG;QAClG,yEAAyE;QACzE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,QAAQ,GAAG,SAAS,IAAI,QAAQ,CAAC;QAC1C,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC/B,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QAC3C,CAAC;IACL,CAAC,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,iBAAiB,CAAC,CAAC;IAE1D,0IAA0I;IAC1I,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;IAAC,CAAC;IACjD,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;IAAC,CAAC;IACpD,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;QAAC,eAAe,GAAG,SAAS,CAAC,eAAe,CAAC;IAAC,CAAC;AAC1E,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { ObjAssign, strShimUndefined } from \"./Constants\";\r\nimport { getGlobal } from \"./Helpers\";\r\nimport { __assignFn, __createBindingFn, __extendsFn } from \"./TsLibShims\";\r\n\r\n// To address compile time errors declaring these here\r\ndeclare var __extends:(d: any, b: any) => any;\r\ndeclare var __assign:(t: any) => any;\r\ndeclare var __createBinding:(o: any, m: any, k: any, k2?: any) => void;\r\n\r\nexport function __exposeGlobalTsLib() {\r\n    let globalObj:any = getGlobal() || {};\r\n\r\n    // tslint:disable: only-arrow-functions\r\n    (function (root: any, assignFn, extendsFn, createBindingFn) {\r\n        // Assign the globally scoped versions of the functions -- used when consuming individual ts files\r\n        // If check is to support NativeScript where these are marked as readonly\r\n        if (!root.__assign) {\r\n            root.__assign = ObjAssign || assignFn;\r\n        }\r\n        if (!root.__extends) {\r\n            root.__extends = extendsFn;\r\n        }\r\n        if (!root.__createBinding) {\r\n            root.__createBinding = createBindingFn;\r\n        }\r\n    })(globalObj, __assignFn, __extendsFn, __createBindingFn);\r\n    \r\n    // Assign local variables that will be used for embedded scenarios, if check is to support NativeScript where these are marked as readonly\r\n    if (!__assign) { __assign = globalObj.__assign; }\r\n    if (!__extends) { __extends = globalObj.__extends; }\r\n    if (!__createBinding) { __createBinding = globalObj.__createBinding; }\r\n}\r\n"]}